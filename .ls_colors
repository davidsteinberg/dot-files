#-----------------
# LS Colors
#-----------------

#
# Customize lines 11 - 21
#

LSFileColors='

Directory      : Bold Cyan       on Default Color
Sym link       : Bold Light Gray on Default Color
Socket         : Bold Brown      on Default Color
Pipe           : Bold Magenta    on Default Color
Executable     : Bold Green      on Default Color
Block special  : Blue            on Cyan
Char special   : Blue            on Brown
Exec setuid    : Black           on Red
Exec setgid    : Black           on Cyan
Dir sticky     : Black           on Green
Dir not sticky : Blue            on Brown

'

#
# 1. You can include as many or as few of the lines as you would like, in any order
#
# 2. Whitespace and case do not matter at all
#
# 3. The order of each line must be --> {file type} : {foreground color} on {background color}
#

#-----------------
# File Types
#-----------------

#    Directory
#    Sym link       (Symbolic link)
#    Socket
#    Pipe
#    Executable
#    Block special
#    Char special   (Character special)
#    Exec setuid    (Executable with setuid bit set)
#    Exec setgid    (Executable with setgid bit set)
#    Dir sticky     (Directory writable to others, with sticky bit)
#    Dir not sticky (Directory writable to others, without sticky bit)
#

#-----------------
# Colors
#-----------------

#    Default Color
#    [Bold] Black
#    [Bold] Red
#    [Bold] Green
#    [Bold] Brown
#    [Bold] Blue
#    [Bold] Magenta
#    [Bold] Cyan
#    [Bold] LightGray

#-----------------
# The Code
#-----------------

# Convert a named color to the letter that represents it

colorNameToLetter() {
    if [ $# -eq 0 ]; then
        echo "Usage: colorNameToLetter <color name>"
        return
    fi

    local letter=$(echo $1 | \
    perl -e "
        my \$result = <STDIN>;
        for (\$result) {
            s:defaultcolor:x:i;

            s:boldblack:A:i;
            s:boldred:B:i;
            s:boldgreen:C:i;
            s:boldbrown:D:i;
            s:boldblue:E:i;
            s:boldmagenta:F:i;
            s:boldcyan:G:i;
            s:boldlightgray:H:i;

            s:black:a:i;
            s:red:b:i;
            s:green:c:i;
            s:brown:d:i;
            s:blue:e:i;
            s:magenta:f:i;
            s:cyan:g:i;
            s:lightgray:h:i;
        }
        
        print \$result;
    ")
    
    echo $letter
}

LSFileTypes=(
    "directory"
    "symlink"
    "socket"
    "pipe"
    "executable"
    "blockspecial"
    "charspecial"
    "execsetuid"
    "execsetgid"
    "dirsticky"
    "dirnotsticky"
)

LSColorsArray=()

# For each line in the LSColors text block

IFS=$'\n'$'\r'
for line in $LSFileColors; do

    # Pluck out its file type and foreground and background colors

    fileType=$(echo "${line}" | sed "s/^ *\([a-zA-Z][a-zA-Z \N]*\) *:.*$/\1/" | sed "s: *::g" | sed "y:ABCDEFGHIJKLMNOPQRSTUVWXYZ:abcdefghijklmnopqrstuvwxyz:")
    colorString=$(echo "${line}" | sed "s/^.*: *\([a-zA-Z][a-zA-Z \N]*\) *on *\([a-zA-Z][a-zA-Z \N]*\)$/\1\2/" | sed "s: *::g")

    if [ -z "${fileType}" ]; then
        continue
    fi
    
    # Store the colors in the appropriate position in output
    
    for t in "${!LSFileTypes[@]}"; do
        if [ "${LSFileTypes[t]}" = "${fileType}" ]; then
            LSColorsArray[$t]="${colorString}"
            break
        fi
    done
done

LSColorsExport=""

# For each type of file (aka position in the output)

for f in "${!LSFileTypes[@]}"; do

    # Convert and add the colors that are there

    if [ "${LSColorsArray[f]}" ]; then
        convertedColors="${LSColorsArray[f]}"

        LSColorsExport="${LSColorsExport}"$(colorNameToLetter $convertedColors)
        
    # Add the default color if nothing is specified

    else
        LSColorsExport="${LSColorsExport}xx"
    fi
done

export LSCOLORS=$LSColorsExport

#-----------------
# LS Color Live
#-----------------

lscolor() {

    # In case it wasn't before,
      export CLICOLOR=1

    # Report usage error if needed
    
    if [ $# -eq 1 ]; then
        echo "Usage: lscolor [<file type> <foreground color> [<background color>]]"
        return
    fi

    # Get the existing LSCOLORS

    local CurrentLSColors=$(export -p | grep -o LSCOLORS=.* | sed "s:LSCOLORS=\"\(.*\)\":\1:")

    # Break them apart into 2 character strings

    local LSColorCouplets=()

    local currentCouple=""

    for ((i=0; i<21; i+=2)); do
        LSColorCouplets[(($i/2))]=${CurrentLSColors:$i:2}
    done

    # Look for {file type} {foreground color} {background color}

    local fileType=$1
    local foreColor=$2
    local bgColor=$3
    
    if [ $# -eq 2 ]; then
        bgColor="defaultcolor"
    fi
    
    # Lowercase filetype
    
    fileType=$(echo "$fileType" | sed "y:ABCDEFGHIJKLMNOPQRSTUVWXYZ:abcdefghijklmnopqrstuvwxyz:")

    # Map the second and third arguments to their single character color value
    # Replace the lscolors character couplet at same index as index of filetype in filetypes array
    
    for t in "${!LSFileTypes[@]}"; do
        if [ "${LSFileTypes[t]}" = "$fileType" ]; then        

            foreColor=$(colorNameToLetter $foreColor)
            
            bgColor=$(colorNameToLetter $bgColor)
            
            LSColorCouplets[$t]="$foreColor$bgColor"
            break
        fi
    done
    
    # Remove spaces from the string
    
    local LSColors=$(echo "${LSColorCouplets[@]}" | sed "s: ::g")
    
    # Catch it if the string has untranslated parts (aka letter count > 22)
    
    if [ ${#LSColors} -ne 22 ]; then
        echo "bad arguments passed"
        return
    fi
    
    export LSCOLORS=$LSColors
}